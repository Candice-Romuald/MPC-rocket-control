function opti_eval = NMPC_Control(rocket, H)

import casadi.*
opti = casadi.Opti(); % Optimization problem

N = ceil(H/rocket.Ts); % MPC horizon
nx = 12; % Number of states
nu = 4;  % Number of inputs

% Decision variables (symbolic)
X_sym = opti.variable(nx, N); % state trajectory
U_sym = opti.variable(nu, N-1);   % control trajectory)

% Parameters (symbolic)
x0_sym  = opti.parameter(nx, 1);  % initial state
ref_sym = opti.parameter(4, 1);   % target position

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE

%terminal cost
Q = 100*eye(nx);
[xs, us] = rocket.trim();
sys = rocket.linearize(xs,us);
sys_d = c2d(sys, rocket.Ts);
R = diag([5 5 15 5]);
%LQR cost as a terminal cost
[~,Qf,~] = dlqr(sys_d.A, sys_d.B, Q, R);

%Beta cons, andd alpha too otherwise degenerate beaviour
Hx = [0 0 0 0 1 0 0 0 0 0 0 0;   
     0 0 0 0 -1 0 0 0 0 0 0 0];

hx = [deg2rad(85); deg2rad(85)];

epsilon = opti.variable(2,N); %introduce slack variables

%loss function
x_tar = [0 0 0 0 0 ref_sym(4) 0 0 0 ref_sym(1) ref_sym(2) ref_sym(3)]';
opti.minimize(...
  10*X_sym(1,:)*X_sym(1,:)'+ ... %wx
  10*X_sym(2,:)*X_sym(2,:)'+ ... %wy
  10*X_sym(3,:)*X_sym(3,:)'+ ... %wz
  100*X_sym(4,:)*X_sym(4,:)'+ ... %a
  100*X_sym(5,:)*X_sym(5,:)'+ ... %b
  100*(X_sym(6,:)-ref_sym(4))*(X_sym(6,:)-ref_sym(4))'+ ... %c
  10*X_sym(7,:)*X_sym(7,:)'+ ... %vx
  10*X_sym(8,:)*X_sym(8,:)'+ ... %vy
  10*X_sym(9,:)*X_sym(9,:)'+ ... %vz
  100*(X_sym(10,:)-ref_sym(1))*(X_sym(10,:)-ref_sym(1))'+ ... %x
  100*(X_sym(11,:)-ref_sym(2))*(X_sym(11,:)-ref_sym(2))'+ ... %y
  1000*(X_sym(12,:)-ref_sym(3))*(X_sym(12,:)-ref_sym(3))'+ ... %z
  U_sym(3,:)*U_sym(3,:)' + ...  %Pavg could remove to achieve much greater accuracy
  (X_sym(:,N)-x_tar)'*Qf*(X_sym(:,N)-x_tar));
  
  %U_sym(1,:)*U_sym(1,:)' + ... 
  %U_sym(2,:)*U_sym(2,:)' + ... 
  %U_sym(4,:)*U_sym(4,:)'+...

h = rocket.Ts;
% constrains
opti.subject_to(X_sym(:,1) == x0_sym);
  
for k=1:N-1 % loop over control intervals
  k1 = rocket.f(X_sym(:,k),U_sym(:,k));
  k2 = rocket.f(X_sym(:,k)+h/2*k1, U_sym(:,k));
  k3 = rocket.f(X_sym(:,k)+h/2*k2, U_sym(:,k));
  k4 = rocket.f(X_sym(:,k)+h*k3,   U_sym(:,k));
  x_next = X_sym(:,k) + h/6*(k1+2*k2+2*k3+k4);
  
  opti.subject_to(X_sym(:,k+1) == x_next);
  opti.subject_to(Hx*(X_sym(:,k)-x_tar) <= hx-Hx*x_tar + epsilon(:,k));
  
  opti.subject_to(epsilon(:,k) >= zeros(2,1));
end
opti.subject_to(Hx*(X_sym(:,N)-x_tar) <= hx-Hx*x_tar);

opti.subject_to(deg2rad(-15) <= U_sym(1:2,:) <= deg2rad(15));
opti.subject_to(50 <= U_sym(3,:) <= 80);
opti.subject_to(-20 <= U_sym(4,:) <= 20);  
% YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ---- Setup solver ------
ops = struct('ipopt', struct('print_level', 0, 'tol', 1e-3), 'print_time', false);
opti.solver('ipopt', ops);

% Create function to solve and evaluate opti
opti_eval = @(x0_, ref_) solve(x0_, ref_, opti, x0_sym, ref_sym, U_sym);
end

function u = solve(x0, ref, opti, x0_sym, ref_sym, U_sym)

% ---- Set the initial state and reference ----
opti.set_value(x0_sym, x0);
opti.set_value(ref_sym, ref);

% ---- Solve the optimization problem ----
sol = opti.solve();
assert(sol.stats.success == 1, 'Error computing optimal input');

u = opti.value(U_sym(:,1));

% Use the current solution to speed up the next optimization
opti.set_initial(sol.value_variables());
opti.set_initial(opti.lam_g, sol.value(opti.lam_g));
end
